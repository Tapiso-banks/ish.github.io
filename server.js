// server.js - Fixed Version

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const Anthropic = require('@anthropic-ai/sdk');
const PDFDocument = require('pdfkit');

const app = express();
const port = process.env.PORT || 3000;

// CORS Configuration
const corsOptions = {
  origin: 'https://tapiso-banks.github.io',
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type'],
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));
app.use(bodyParser.json());

// Initialize Anthropic
const anthropic = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY,
});

// Fixed PDF creation function - removes problematic switchToPage calls
function createPDF(content, title, isQuestionPaper = false) {
    return new Promise((resolve, reject) => {
        try {
            const doc = new PDFDocument({
                margin: 50,
                size: 'A4'
            });
            
            const chunks = [];
            doc.on('data', chunk => chunks.push(chunk));
            doc.on('end', () => {
                const pdfBuffer = Buffer.concat(chunks);
                resolve(pdfBuffer);
            });
            doc.on('error', reject);

            // Add header with title
            doc.fontSize(18).font('Helvetica-Bold');
            doc.text(title, { align: 'center' });
            doc.moveDown(1);
            
            // Add separator line
            doc.moveTo(50, doc.y)
               .lineTo(545, doc.y)
               .stroke();
            doc.moveDown(1);

            // Process content line by line
            doc.fontSize(12).font('Helvetica');
            const lines = content.split('\n');
            
            lines.forEach(line => {
                line = line.trim();
                if (line) {
                    // Handle markdown-style formatting
                    if (line.startsWith('**') && line.endsWith('**')) {
                        // Bold headings
                        doc.fontSize(14).font('Helvetica-Bold');
                        doc.text(line.replace(/\*\*/g, ''), { align: 'left' });
                        doc.moveDown(0.5);
                        doc.fontSize(12).font('Helvetica');
                    } else if (line.startsWith('###')) {
                        // Sub-headings
                        doc.fontSize(13).font('Helvetica-Bold');
                        doc.text(line.replace(/###/g, '').trim(), { align: 'left' });
                        doc.moveDown(0.3);
                        doc.fontSize(12).font('Helvetica');
                    } else if (line.startsWith('##')) {
                        // Main headings
                        doc.fontSize(15).font('Helvetica-Bold');
                        doc.text(line.replace(/##/g, '').trim(), { align: 'left' });
                        doc.moveDown(0.5);
                        doc.fontSize(12).font('Helvetica');
                    } else if (line.startsWith('*') || line.startsWith('-')) {
                        // Bullet points
                        doc.text(`‚Ä¢ ${line.substring(1).trim()}`, {
                            indent: 20,
                            align: 'left'
                        });
                    } else if (/^\d+\./.test(line)) {
                        // Numbered items
                        doc.text(line, { align: 'left' });
                    } else if (line.includes('Question') && /\d+/.test(line) && isQuestionPaper) {
                        // Question numbering for question papers
                        doc.fontSize(13).font('Helvetica-Bold');
                        doc.text(line, { align: 'left' });
                        doc.moveDown(0.2);
                        doc.fontSize(12).font('Helvetica');
                    } else if (line.toLowerCase().includes('marks:') || (line.includes('[') && line.toLowerCase().includes('marks'))) {
                        // Mark allocation
                        doc.fontSize(10).font('Helvetica-Oblique');
                        doc.text(line, { align: 'right' });
                        doc.moveDown(0.3);
                        doc.fontSize(12).font('Helvetica');
                    } else {
                        // Regular text
                        doc.text(line, { align: 'left' });
                    }
                    doc.moveDown(0.3);
                    
                    // Add page break if content is getting too long (avoid footer issues)
                    if (doc.y > 720) {
                        doc.addPage();
                    }
                }
            });

            // Simple footer on current page only (no switchToPage)
            doc.fontSize(10).font('Helvetica');
            doc.text('Generated by Student Helper', 50, 750, { align: 'center', width: 495 });

            doc.end();
            
        } catch (error) {
            reject(error);
        }
    });
}

// Improved content splitting function
function splitContent(content) {
    try {
        // Look for section markers (case insensitive)
        const sectionRegex = /\*\*Section\s+(\d+):\s*([^*]*)\*\*/gi;
        const sections = [];
        let match;
        
        while ((match = sectionRegex.exec(content)) !== null) {
            sections.push({
                number: parseInt(match[1]),
                title: match[2].trim(),
                startIndex: match.index + match[0].length
            });
        }
        
        let notesContent = '';
        let questionsContent = '';
        
        if (sections.length >= 2) {
            // Extract content between sections
            const section1Start = sections[0].startIndex;
            const section2Start = sections[1].startIndex;
            
            notesContent = content.substring(section1Start, content.indexOf('**Section 2:', section1Start)).trim();
            questionsContent = content.substring(section2Start).trim();
        } else {
            // Fallback: split by keywords
            const lowerContent = content.toLowerCase();
            const questionStart = Math.max(
                lowerContent.indexOf('question paper'),
                lowerContent.indexOf('practice questions'),
                lowerContent.indexOf('questions:'),
                lowerContent.indexOf('section 2')
            );
            
            if (questionStart > 0) {
                notesContent = content.substring(0, questionStart).trim();
                questionsContent = content.substring(questionStart).trim();
            } else {
                // Last resort: split roughly in half
                const midPoint = Math.floor(content.length / 2);
                const splitPoint = content.indexOf('\n', midPoint);
                notesContent = content.substring(0, splitPoint > 0 ? splitPoint : midPoint).trim();
                questionsContent = content.substring(splitPoint > 0 ? splitPoint : midPoint).trim();
            }
        }
        
        // Ensure we have content for both sections
        if (!notesContent || notesContent.length < 50) {
            notesContent = "Study notes section - please refer to the generated content.";
        }
        if (!questionsContent || questionsContent.length < 50) {
            questionsContent = "Practice questions section - please refer to the generated content.";
        }
        
        return { notesContent, questionsContent };
        
    } catch (error) {
        console.error('Content splitting error:', error);
        // Fallback: return original content for both
        return { 
            notesContent: content, 
            questionsContent: "Questions section - see notes for full content" 
        };
    }
}

app.post('/api/generate', async (req, res) => {
    console.log('üì® Generate request received');
    
    try {
        const { school, grade, subject, topic, format, notes_pages, papers_pages, email } = req.body;

        // Validation
        if (!school || !grade || !subject || !topic || !notes_pages || !papers_pages || !email) {
            console.log('‚ùå Validation failed');
            return res.status(400).json({ error: 'All form fields are required.' });
        }

        console.log(`üìã Processing: ${subject} - ${topic} for Grade ${grade}`);

        // Construct prompt
        const prompt = `
        You are a helpful assistant for students.
        Create study materials for the following request:

        Subject: ${subject}
        Topic: ${topic}
        Grade: ${grade}
        School: ${school}
        Notes Length: ${notes_pages} pages
        Questions Length: ${papers_pages} pages
        Question Formats: ${format}

        Please structure your response with exactly these two sections:

        **Section 1: Notes**
        Create comprehensive study notes covering:
        - Key concepts and definitions
        - Important formulas (if applicable)
        - Examples and explanations
        - Summary points
        Structure with clear headings using ## and ###.

        **Section 2: Question Paper**
        Create a practice question paper with:
        - Variety of question types: ${format}
        - Clear question numbering (Question 1, Question 2, etc.)
        - Mark allocation for each question [X marks]
        - Answer key at the end
        - Instructions for students

        Ensure content is appropriate for Grade ${grade} level.
        `;

        console.log('ü§ñ Calling Anthropic API...');
        
        const response = await anthropic.messages.create({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 4000,
            messages: [{
                role: "user",
                content: prompt
            }]
        });

        const generatedContent = response.content[0].text;
        console.log(`‚úÖ Content generated: ${generatedContent.length} characters`);

        // Split content into sections
        const { notesContent, questionsContent } = splitContent(generatedContent);
        console.log(`üìÑ Content split - Notes: ${notesContent.length} chars, Questions: ${questionsContent.length} chars`);

        // Generate filenames
        const cleanSubject = subject.replace(/[^a-zA-Z0-9]/g, '_');
        const cleanTopic = topic.replace(/[^a-zA-Z0-9]/g, '_');
        const notesFilename = `${cleanSubject}_${cleanTopic}_Grade${grade}_Notes.pdf`;
        const questionsFilename = `${cleanSubject}_${cleanTopic}_Grade${grade}_Questions.pdf`;

        console.log('üìÑ Generating PDFs...');

        // Generate PDFs
        const notesPdfBuffer = await createPDF(
            notesContent, 
            `${subject} - ${topic} Study Notes (Grade ${grade})`,
            false
        );
        
        const questionsPdfBuffer = await createPDF(
            questionsContent, 
            `${subject} - ${topic} Practice Questions (Grade ${grade})`,
            true
        );

        console.log('‚úÖ PDFs generated successfully');

        // Convert to base64
        const notesPdfBase64 = notesPdfBuffer.toString('base64');
        const questionsPdfBase64 = questionsPdfBuffer.toString('base64');

        // Send response
        res.status(200).json({
            message: 'Content generated successfully!',
            generatedText: generatedContent,
            notesPdf: {
                data: notesPdfBase64,
                filename: notesFilename
            },
            questionsPdf: {
                data: questionsPdfBase64,
                filename: questionsFilename
            }
        });

        console.log('‚úÖ Response sent successfully');

    } catch (error) {
        console.error('‚ùå Error in /api/generate:', error);
        console.error('Error details:', error.message);
        
        let errorMessage = 'Error generating content. Please try again.';
        
        if (error.message && error.message.includes('API key')) {
            errorMessage = 'AI service authentication error.';
        } else if (error.message && error.message.includes('rate limit')) {
            errorMessage = 'Service temporarily busy. Please try again in a moment.';
        } else if (error.message && error.message.includes('switchToPage')) {
            errorMessage = 'PDF generation error. Please try again.';
        }
        
        res.status(500).json({ error: errorMessage });
    }
});

// Health check
app.get('/', (req, res) => {
    res.json({
        message: 'Student Helper Backend is running!',
        status: 'healthy',
        timestamp: new Date().toISOString()
    });
});

app.listen(port, () => {
    console.log(`üéØ Server listening on port ${port}`);
});
